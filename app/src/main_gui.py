# Form implementation generated from reading ui file '.\ui\main.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from typing import Optional

from PyQt6 import QtCore, QtWidgets
from PyQt6.QtWidgets import QMainWindow, QLabel, QWidget
from PyQt6.QtGui import QPixmap
from PyQt6.QtCore import Qt

from common.logger_helper import init_logger

logger = init_logger()


class MainGui(QMainWindow):
    def __init__(self):
        self.timers = dict()

    def _init_gui(self):
        super().__init__()
        self.setObjectName("MainWindow")
        self.resize(635, 523)

        # Create the background drone feed
        self.drone_video_label = QLabel("drone feed", self)
        self.drone_video_label.setScaledContents(True)
        self.drone_video_label.setGeometry(0, 0, 635, 523)
        self.drone_video_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        # Create a new central widget
        self.centralwidget = QWidget(self)
        self.setCentralWidget(self.centralwidget)

        # Create a new label for the recent command
        # Note: May also require setting a pixmap and setting the size
        self.recentCommand = QLabel("Recent command", self.centralwidget)
        self.recentCommand.setAlignment(Qt.AlignmentFlag.AlignHCenter)
        self.recentCommand.setStyleSheet("color: red; font-size: 14px;")

        # Create a new label for the recent command
        # Note: May also require setting a pixmap and setting the size
        self.webcam_video_label = QLabel("webcam", self.centralwidget)
        self.webcam_video_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.webcam_video_label.setStyleSheet("color: red; font-size: 14px;")

        # Add recent command and video feed labels to the central widget layout
        # Create a layout for central widget
        self.layout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.layout.addWidget(self.recentCommand)
        self.layout.addWidget(self.webcam_video_label)
        self.centralwidget.setLayout(self.layout)
        self.centralwidget.raise_()

    def _init_qpixmaps(self) -> None:
        """
        Initialises qpixmaps for the video feeds.
        """

        self.webcam_pixmap: Optional[QPixmap] = None
        self.drone_pixmap: Optional[QPixmap] = None

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.drone_video_label.setText(
            _translate("MainWindow", "Main drone feed"))
        self.webcam_video_label.setText(_translate("MainWindow", "Video feed"))
        self.recentCommand.setText(_translate("MainWindow", "Recent command"))
        # self.menuFile.setTitle(_translate("MainWindow", "File"))
        # self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        # self.actionNew.setText(_translate("MainWindow", "New "))
        # self.actionOptions.setText(_translate("MainWindow", "Options"))
        # self.actionQuit.setText(_translate("MainWindow", "Quit"))
        # self.actionAbout.setText(_translate("MainWindow", "About"))

    def resizeEvent(self, event):
        """
        Handles the event where the window gets resized
        """

        if self.drone_pixmap is not None:
            self.drone_video_label.setGeometry(
                0, 0, self.width(), self.height())
            scaled_drone_pixmap = self.drone_pixmap.scaled(self.width(), self.height(
            ), Qt.AspectRatioMode.KeepAspectRatioByExpanding, Qt.TransformationMode.SmoothTransformation)
            self.drone_video_label.setPixmap(scaled_drone_pixmap)
        else:
            logger.debug(
                "Drone pixmap not defined. Not handling resize event.")

        # Make sure that centralwidget stays on top of the background
        self.centralwidget.raise_()
