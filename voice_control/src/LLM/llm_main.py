"""
This module contains the main logic for running the terminal agent in the Local Language Model (LLM) system.
"""

import openai
from typing import List, Dict, Optional
from .core import AgentInteractiveConsole, react
from .defaults import init_context
from .wrappers import done, proxy_input
from .formatting import remove_code_block_formatting
import logging

from ..constants import GPT_35_MODEL, GPT_4_MODEL

logger = logging.getLogger(__name__)


def ask_fn(context: List[Dict[str, str]], aux: bool = False) -> str:
    """
    Sends a chat completion request to the OpenAI API using the specified model and returns the response.

    Args:
        context (List[Dict[str, str]]): A list of dictionaries representing the conversation history.
                                        Each dictionary should contain keys like 'role' and 'content'.
        aux (bool, optional): A flag that determines whether to use the "gpt-3.5-turbo" model (if True)
                              or "gpt-4o-mini" model (if False). Defaults to False.

    Returns:
        str: The content of the response from the OpenAI API.
    """
    model = GPT_35_MODEL if aux else GPT_4_MODEL
    response = openai.ChatCompletion.create(model=model, temperature=0, messages=context)
    terminal_code = response["choices"][0]["message"]["content"]
    clean_code = remove_code_block_formatting(terminal_code)
    return clean_code


def run_terminal_agent(user_input: str) -> Optional[str]:
    """
    Runs an interactive terminal agent that reacts to user input and executes commands in a console environment.
    If no user input is provided, the function will return empty output.

    Args:
        user_input (str): The initial user input. Can be an empty string.

    Returns:
        Optional[str]: The output generated by the agent in response to the user's command. None if no command is given.
    """

    if not user_input:
        return None

    interactive_console = AgentInteractiveConsole(locals={"done": done, "input": proxy_input})
    context = init_context()

    user_command = f">>> # User: {user_input}"
    _, _, output = react(interactive_console, ask_fn, context, user_command)

    return output


if __name__ == "__main__":
    run_terminal_agent("")
